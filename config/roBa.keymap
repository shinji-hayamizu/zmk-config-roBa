#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W    &kp E    &kp R         &kp T                                                   &kp Y                &kp U  &kp I      &kp O    &kp P
&kp A               &kp S    &kp D    &kp F         &kp G                    &kp LG(PLUS)      &kp MINUS    &kp H                &kp J  &kp K      &kp L    &kp BACKSPACE
&mt LEFT_CONTROL Z  &kp X    &kp C    &kp V         &kp B                    &kp PLUS          &kp MINUS    &kp N                &kp M  &kp COMMA  &kp DOT  &kp ENTER
&kp LEFT_SHIFT      &kp TAB  &kp ESC  &kp LEFT_ALT  &mt LEFT_WIN LANGUAGE_4  &lt 1 SPACE       &lt 2 SPACE  &mt RIGHT_WIN LANG7                             &kp RIGHT_SHIFT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp F1          &kp F2  &kp F3  &kp F4  &kp F5                          &kp F1          &kp F2     &kp AT_SIGN   &kp LEFT_BRACKET   &kp BACKSPACE
&kp F6          &kp F7  &kp F8  &kp F9  &kp F10  &trans       &kp F13   &kp UP          &kp PLUS   &kp ASTERISK  &kp RIGHT_BRACKET  &kp ENTER
&trans          &trans  &trans  &trans  &kp F11  &kp F12      &kp LEFT  &kp DOWN_ARROW  &kp RIGHT  &kp SLASH     &kp UNDERSCORE     &kp ENTER
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans   &trans       &trans    &trans                                                      &kp RIGHT_SHIFT
            >;
        };

        NUM {
            bindings = <
&kp NUMBER_1    &kp NUMBER_2  &kp NUMBER_3     &kp NUMBER_4     &kp N5                                                   &kp AT_SIGN      &kp LEFT_BRACKET   &kp CARET  &kp PIPE    &kp BACKSPACE
&kp NUMBER_6    &kp N7        &kp N8           &kp N9           &kp N0      &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION  &kp RIGHT_BRACKET  &kp HASH   &kp DOLLAR  &kp ENTER
&kp SEMICOLON   &kp U         &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD  &kp PLUS                     &trans          &kp SLASH        &kp UNDERSCORE     &mkp LCLK  &mkp MCLK   &mkp RCLK
&kp LEFT_SHIFT  &trans        &trans           &trans           &trans      &trans                       &trans          &trans                                                     &kp RIGHT_SHIFT
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
